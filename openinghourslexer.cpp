#line 1 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"

#line 3 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1004] =
    {   0,
        0,    0,  186,  184,    1,    1,    1,  184,  178,   23,
       24,   11,   16,   12,  106,   13,    2,    2,    2,   14,
       16,  108,  184,  184,  184,  178,  184,  184,  107,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  178,   21,   22,  184,  108,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
        1,    0,    0,    0,    0,    0,  104,   15,    4,    0,
        2,   32,   33,    2,    2,    3,    0,  108,    0,    0,
        0,  108,  108,    0,    0,    0,    0,    0,    0,  179,
        0,    0,  179,    0,    0,    0,  178,    0,   47,    0,

        0,  125,    0,  124,    0,    0,    0,  179,    0,  120,
      121,  122,  123,   43,    0,    0,    0,    0,   25,    0,
        0,    0,   48,    0,   26,  127,   49,    0,    0,   46,
      108,   44,    0,    0,  126,    0,    0,   45,    0,    5,
      108,    0,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,   33,    0,
        0,  178,    0,   71,   75,    0,  108,    0,    0,    0,

      179,    0,   79,  113,  134,  142,    0,    0,    0,    0,
        0,    0,   69,    0,    0,   54,    0,   47,    0,    0,
        0,  146,   68,  131,    0,    0,    0,   74,    0,   73,
        0,    0,  128,   84,   70,   72,  130,    0,    0,    0,
        0,   50,   43,   78,   77,    8,    0,    0,    0,    0,
        0,   55,  141,  133,   48,    0,    0,    0,   76,    0,
        0,   56,   49,    0,    0,   53,    0,   46,   51,   44,
      179,  178,    0,  132,  140,  179,   52,   45,    0,    0,
      108,  108,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,

        0,    0,    0,    0,  108,    0,    0,   12,    0,  108,
      179,  161,  162,  107,  156,  159,  158,  157,    0,  160,
       27,   32,   33,   10,    0,    0,   71,    0,   75,    0,
        0,    0,    0,    0,   17,   79,    0,    0,    0,    0,
        0,    0,   20,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   68,    0,    0,
        0,    0,    0,    0,   85,   74,   62,    0,   73,   61,
        0,    0,    0,    0,   70,    0,    0,   82,    0,   72,
        0,    0,    0,    0,    0,    0,   78,    0,   77,    0,
        6,    0,    0,  166,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   76,   76,    0,    0,    0,    0,    0,
      141,    0,    0,    0,   42,   41,    0,    0,    0,    0,
        0,   29,    0,    0,    0,  177,  172,    0,    0,    0,
        0,    0,    0,  171,    0,  175,  175,  176,    0,  173,
      176,    0,    0,  174,    0,    0,    0,    0,  179,    0,
        0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,    0,   87,   60,    0,   83,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,  109,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,    0,    0,  168,  167,  109,

      128,    0,  136,   59,  129,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      169,    0,    0,    0,    0,    0,  164,    0,  155,    0,
        0,    0,    0,    0,  152,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
        0,  109,    7,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,   38,    0,    0,    0,

        0,    0,    0,  139,    0,  143,    0,    0,  137,    0,
        0,    0,  170,    0,   34,  112,    0,    0,    0,  153,
      154,    0,  141,  148,  133,    0,    0,    0,  165,    0,
        0,   40,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  177,  172,  109,    0,    0,
        0,   96,    0,    0,    0,  171,  175,    0,  173,  176,
        0,  174,    0,    0,    0,    0,    0,    0,    0,  161,
      162,  156,  159,  158,  157,  163,  160,  110,  109,    0,
        0,    0,    0,  142,    0,    0,    0,    0,    0,    0,
      116,   38,    0,    0,  146,    0,   57,   80,    0,   86,

      144,    0,    0,    0,    0,    0,   34,  112,    0,    0,
       65,   89,  109,  117,    0,  151,    0,  118,   40,   18,
      108,    0,   35,    9,    0,  147,    0,  140,    0,   31,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,  113,  134,  149,    0,    0,
        0,    0,   58,  119,  116,   81,    0,    0,    0,  130,
        0,  114,   66,   90,  117,   39,    0,    0,  118,   37,
       35,  132,    0,    0,    0,    0,    0,  109,    0,   98,

       97,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,    0,   91,    0,
      109,  119,    0,    0,  145,    0,  138,  114,   39,   64,
       88,   37,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  161,  162,  156,  159,  158,
      157,  160,  115,  179,    0,    0,   36,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,    0,    0,
        0,    0,    0,  183,  109,  111,  110,    0,    0,  115,

      109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
       95,    0,    0,    0,  102,    0,    0,    0,    0,    0,
        0,    0,   92,  182,  183,  109,  111,  110,    0,    0,
      181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
      172,  103,  101,    0,    0,   93,  182,  180,  181,  181,
      181,    0,    0,    0,    0,    0,    0,    0,    0,  100,
      180,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  177,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    6,    1,    7,
        8,    1,    9,   10,   11,   12,   13,   14,   14,   15,
       14,   16,   14,   17,   18,   17,   17,   19,   20,    1,
        1,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,    1,
       46,    1,   47,    1,    1,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,    1,    1,   73,    1,   74,    1,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,    1,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,    1,    1,  108,  109,    1,  110,  111,  112,    1,
      113,  114,    1,    1,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,    1,    1,  132,  133,    1,    1,    1,    1,    1,

        1,    1,  134,    1,    1,    1,    1,  135,  136,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  137,  138,    1,  139,  140,
      141,    1,  142,    1,    1,    1,    1,    1,  143,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[144] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[1008] =
    {   0,
        0,    0, 2014, 2015,  142,  145,  149, 2008, 2015, 2015,
     2015, 2015, 2008, 2015, 2015, 2015,  146,  154,  162, 2015,
        0,  179,  125,  164,  208,  223,  170,  174, 2015,  237,
      136,  263,  272,  124,  272,  157,  156,  186,  288,  314,
      239,  292,  305, 2015, 2015, 2015, 1938, 2015, 1904,   49,
     1918,  270,  112,  178,  161,   91,  153,  156, 1926,  182,
      343, 1901, 1931, 1930,  183, 1999, 2015, 2015, 2015,  316,
      388,  326,  350,  413,  380, 2015,  246, 2015,  267, 1870,
      288, 2015,  354,  346,  348,  351,  362,  377,  376,  390,
      400,  404,  381, 1890,  384,  418, 2015,  433,  444, 1889,

      393,  408,  411,  416,  417,  458,  433, 2015,  445,  440,
      457,  439,  463,  487,  436,  467,  482,  484, 2015,  491,
      489,  488,  511,  518, 2015,  492,  515, 1893,  490,  520,
     2015,  534,  499,  532,  506,  516,  508,  568,  528, 2015,
      531,  534, 2015, 1864,   70, 1863, 1861, 1861, 1860, 1859,
      235,  318, 1858,  430, 1857, 1856,  539, 1855, 1854, 1852,
      540, 1852, 1850,  511, 1892, 1891,  519, 1855, 1901, 1876,
     1871, 1902,  185, 1858, 1864, 1873, 1883, 1880,  499, 1869,
     1857, 1896,  537,  579,  596,  565, 1958,  577, 1957, 1950,
      586, 2015, 1840,  604,  605,  589, 2015,  584,  582,  585,

     2015,  593,  616,  596,  610,  607,  600,  604,  617,  602,
      620,  619,  640,  628,  615, 2015,  626,  640,  632,  630,
      653,  635,  667,  659,  646,  643,  654,  669,  668,  675,
      661,  656,  671, 2015,  706, 1954,  674,  660,  674,  666,
     1853, 2015,  702,  695,  719, 2015,  698,  696,  703,  697,
      714, 2015,  722,  719,  699,  707,  728,  721,  739,  715,
      726, 2015,  754,  741,  745, 2015,  739,  742, 2015,  744,
     2015, 2015,  750,  772,  748, 2015, 2015,  754,  760,  754,
     2015, 2015,  317, 1834,  281, 1842, 1873, 1845, 1830, 1833,
      672,  722,  683,  739, 1837, 1836, 1879, 1826, 1824, 2015,

     1823, 1836, 1830, 1873, 2015, 1833, 1870, 2015,  307, 2015,
     2015, 1807, 1806, 2015, 1805, 1804, 1803, 1802, 1801, 1800,
      764, 2015, 2015, 2015,  770,  769, 2015,  784, 2015,  783,
      793,  805,  788,  803, 2015, 2015,  796,  792,  798,  799,
      800,  812, 2015,  813,  814,  805,  803, 2015,  801,  806,
      824,  821,  807,  827,  812,  829,  837, 2015,  842,  841,
      847,  840,  855,  849, 2015, 2015, 2015,  842, 2015, 2015,
      844,  860,  857,  863, 2015,  860,  862, 2015,  867, 2015,
      858,  871,  868,  855,  878,  879, 2015,  868, 2015,  882,
     2015,  865,  871, 2015,  876,  893,  883,  906,  894,  897,

      902,  898,  905, 2015,  928,  920,  902,  924,  917,  922,
      927,  928, 1829,  909,  913,  931,  921,  920,  921,  931,
      942, 2015,  931, 1803, 1801, 1800, 1800, 1798, 1798, 1797,
      852, 1795, 1794, 2015, 1794, 2015, 1792, 2015, 1792, 1791,
     1790, 1789, 1787, 2015, 1787, 1785, 1785, 1784, 1783, 1781,
     1781,  714, 2015, 1840, 1813, 1812, 1811, 1810, 1809, 1808,
     1811, 1806, 2015,  931, 2015, 2015,  938, 2015,  957,  949,
      965,  968,  951,  970,  966,  969,  961,  967,  963,  968,
      965,  983,  966, 2015, 2015, 1794,  986,  964,  981,  980,
      989,  976,  990, 2015, 1901,  980,  996, 2015, 2015, 2015,

     2015,  995, 2015, 2015, 2015, 1008,  993, 1010, 1003, 1002,
     1009, 1000, 1022, 1028, 1028, 1033, 1034, 1035, 1022, 1023,
     2015, 1031, 1040, 1039, 1040, 1046, 2015, 1035, 2015, 1048,
     1028, 1036, 1038, 1055, 2015, 1059, 1065, 1071, 1054, 1073,
     1075, 1078, 1065, 1066, 1785, 1828, 1826, 1771, 1820, 1773,
      981, 1773, 1822, 1806, 1818, 1765, 1816, 1763, 1770, 1773,
     1771, 1811, 1769, 1810, 1759, 1760, 1757, 1806, 1753, 1018,
     1778, 1777, 1776, 1775, 1774, 1773, 1765, 1771, 1074, 2015,
     1076, 2015, 2015, 1087, 1093, 1087, 1094, 1083, 1084, 1105,
     2015, 1089, 1111, 1095, 1114, 1110, 1101, 1118, 1111, 1118,

     1103, 1111, 1125, 2015, 1112, 2015, 1758, 1124, 2015, 1130,
     1133, 1126, 2015, 1138, 1124, 1126, 1143, 1128, 1144, 2015,
     2015, 1144, 2015, 2015, 2015, 1145, 1156, 1162, 2015, 1164,
     1160, 1150, 1166, 2015, 1166, 1176, 1155, 1167, 1178, 1174,
     1166, 1182, 1173, 1735, 1735, 1734, 1732, 1076, 1732, 1730,
     1729, 2015, 1728, 1728, 1726, 1726, 1725, 1723, 1723, 1722,
     1720, 1720, 1719, 1717, 1084, 1717, 1715, 1714, 1714, 1708,
     1707, 1706, 1705, 1704, 1703, 2015, 1702, 2015, 2015, 1171,
     1188, 1192, 1201, 2015, 1183, 1187, 1197, 1207, 1190, 1210,
     1199, 2015, 1201, 1201, 2015, 1727, 2015, 2015, 1707, 2015,

     2015, 1725, 1217, 1214, 1220, 1218, 2015, 2015, 1209, 1223,
     2015, 2015, 2015, 1215, 1210, 2015, 1231, 1220, 2015, 2015,
     2015, 1215, 1222, 2015, 1234, 2015, 1724, 2015, 1250, 2015,
     1759, 1715, 1709, 1759, 1192, 1249, 1717, 1745, 1744, 1753,
     1712, 1738, 1706, 1697, 1748, 1704, 1706, 1747, 1703, 1704,
     1739, 1702, 1742, 1693, 1740, 1738, 1692, 1715, 1714, 1713,
     1712, 1711, 1710, 1709, 2015, 1237, 2015, 2015, 1256, 1253,
     1245, 1305, 2015, 1317, 2015, 2015, 1304, 1693, 1315, 2015,
     1306, 1307, 2015, 2015, 2015, 1308, 1310, 1324, 2015, 1311,
     2015, 2015, 1306, 1668, 1668, 1666, 1666, 1149, 1665, 2015,

     2015, 2015, 1663, 1663, 1662, 1661, 1659, 1659, 1658, 1657,
     1656, 1654, 1654, 1652, 1651, 1651, 1649, 1649, 1647, 1673,
     1672, 1671, 1670, 1669, 1668, 1667, 2015, 1325, 2015, 1312,
     2015, 2015, 1329, 1317, 2015, 1661, 2015, 2015, 2015, 2015,
     2015, 2015, 1317, 1698, 1646, 1697, 1642, 1653, 1694, 1651,
     1647, 1642, 1675, 1648, 1633, 1646, 1640, 1685, 1629, 1681,
     1671, 1638, 1669, 1636, 1678, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 1318, 2015, 1324, 1330, 2015, 1616, 1615, 1615,
     1614, 1612, 1611, 1610, 1610, 1608, 1608, 2015, 1606, 1606,
     1604, 1603, 1603, 1156, 1158, 1164, 1166, 1602, 1225, 2015,

     2015, 1603, 1658, 1647, 1612, 1608, 1656, 1643, 1654, 1607,
     1646, 1609, 1648, 1597, 1648, 1635, 1601, 1271, 1328, 1305,
     1374, 1351, 1408, 1385, 1442, 1599, 1419, 1476, 1607, 2015,
     2015, 1582, 1582, 1580, 2015, 1579, 1579, 1578, 1576, 1576,
     1574, 1571, 2015, 1227, 1229, 1302, 1304, 1306, 1567, 1544,
     1308, 1380, 1559, 1475, 1480, 1446, 1372, 1349, 1372, 1329,
     1281, 1247, 1453, 1510, 1220, 1169, 1487, 1544, 2015, 1154,
     2015, 2015, 2015, 1144,  965, 2015, 1502, 1504, 1506, 1508,
     1510,  631,  615,  560, 1531, 1588, 1565,  396,  390, 2015,
     1562,  334,  278,  215,  197,  227,  142,  116,  111,   70,

       39, 2015, 2015, 1698, 1701, 1704, 1707
    } ;

static const flex_int16_t yy_def[1008] =
    {   0,
     1003,    1, 1003, 1003, 1003, 1003, 1003, 1004, 1003, 1003,
     1003, 1003, 1005, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1006, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1004, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1007, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1007, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003,    0, 1003, 1003, 1003, 1003
    } ;

static const flex_int16_t yy_nxt[2159] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   17,   19,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,    4,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,    4,   44,   45,   46,   22,   23,   24,
       25,   26,   27,   28,   29,    4,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        4,   44,   47,   48,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   61,   61,   61,   61,   61,   70,
       61,   61,   61,   85,  141,  142,  107,   70,  115,   71,
       71,   71,   71,   71,  434,   70,   72,   71,   71,   74,
       71,   71,   65,  169,   72,   75,   75,   75,   75,   75,
       85,   73,   72,  107,  119,  115,  162,  163,   86,   73,
     1002,   87,  170,   72,   98,   88,  120,   73,  101,   65,

       77,   72,  102,  183,  284,  285,  121,   99,   73,   72,
       78,  119,   79,   80,   81,   86,   73,   82,   87,   83,
       84,   98,   88,  120,   73,  101,  122,   77,   89,  102,
      183,  175,   90,  121,   99,  167,   91,   78,  168,   79,
       80,   81,   92,   95,   82, 1001,   83,   84,   93,  171,
     1000,  172,  164,  122,  173,   89,   96,  103,  165,   90,
      166,  104,   97,   91,  176,  999,  133,  315,  174,   92,
       95,  105,  134,   62,  191,   93,   62,  106,   63,   64,
       62,   63,   64,   96,  103,   63,   64,  108,  104,   97,
      192,  109,  111,  133,  116,  316,  112,  117,  105,  134,

      113,  191,  100,  110,  106,  178,  114,  118,  123,  179,
      180,  453,  124,  998,  108,  125,  135,  192,  109,  111,
      136,  116,  126,  112,  117,  194,  137,  113,  127,  138,
      110,  997,  139,  114,  118,  123,  184,  186,  129,  124,
       94,  130,  125,  135,   61,   61,   61,  136,  131,  126,
      996,  185,  194,  137,  132,  127,  138,  427,  187,  139,
      144,  188,  145,  184,  146,  129,  428,  147,  130,  291,
      292,  148,  149,  150,  151,  131,  152,  153,  185,  154,
      195,  132,  189,  196,  155,  187,  197,  156,  198,  157,
      199,   70,  158,   75,   75,   75,   75,   75,  159,  160,

      161,   75,   75,   75,   75,   75,  995,  195,   72,  189,
      196,  200,  203,  197,  201,  198,   70,  199,  202,  208,
      128,  211,  210,   73,  204,  190,   75,   75,   75,   75,
       75,  221,  205,   72,  424,   72,  206,  207,  200,  203,
      212,  201,  222,  454,  223,  202,  208,  425,   73,  210,
       73,  204,  293,  294,  213,  216,  224,  225,  221,  205,
       72,  214,  994,  206,  207,  231,  232,  212,  217,  222,
      215,  223,  218,  233,   62,   73,  237,  244,  219,   63,
       64,  213,  226,  224,  225,  234,  227,  238,  214,  228,
      229,  230,  231,  232,  235,  217,  239,  215,  242,  218,

      233,  236,  240,  237,  244,  219,  245,  246,  247,  226,
      250,  248,  234,  227,  238,  251,  228,  229,  230,  249,
      243,  235,  252,  239,  993,  261,  262,  265,  236,  240,
      992,  266,  253,  245,  246,  247,  271,  250,  248,  274,
      275,  276,  251,  254,  256,  269,  249,  243,  263,  257,
      255,  258,  261,  259,  265,  272,  280,  267,  270,  253,
      268,  260,  273,  271,  296,  297,  274,  275,  276,  281,
      254,  256,  282,  300,  305,  263,  257,  255,  258,  277,
      259,  321,  272,  280,  267,  270,  308,  268,  260,  273,
      186,  278,  279,   61,  192,  241,  281,  187,  143,  282,

      300,  305,  308,  308,  308,  308,  308,  188,  321,  189,
      325,  187,  309,  309,  309,  327,  329,  331,  278,  279,
      310,  332,  333,  334,  187,   61,  335,  336,  189,  338,
      339,  340,  328,  342,  343,  341,  189,  325,  187,  344,
      337,  345,  346,  347,  331,  330,  990,  352,  332,  333,
      334,  348,  350,  335,  353,  189,  338,  339,  340,  328,
      342,  343,  341,  354,  311,  351,  344,  337,  345,  346,
      347,  355,  330,  301,  352,  356,  357,  349,  358,  350,
      366,  353,  361,  362,  363,  364,  369,  365,  368,  371,
      354,  311,  351,  372,  373,  374,  381,  382,  355,  370,

      383,  989,  356,  357,  349,  384,  387,  359,  360,  361,
      362,  363,  364,  367,  365,  368,  371,  375,  453,  388,
      372,  373,  374,  381,  382,  385,  370,  383,  376,  377,
      389,  391,  384,  392,  359,  360,  393,  394,  395,  400,
      367,  386,  396,  398,  378,  379,  388,  401,  402,  403,
      404,  988,  385,  390,  406,  376,  377,  399,  391,  407,
      392,  397,  411,  393,  394,  395,  400,  412,  386,  396,
      398,  378,  379,  414,  401,  402,  403,  408,  405,  415,
      390,  406,  416,  417,  399,  420,  407,  421,  397,  411,
      422,  409,  410,  423,  412,  418,  419,  434,  436,  438,

      414,  435,  463,  439,  408,  405,  415,  464,  465,  416,
      417,  437,  420,  440,  421,  466,  441,  422,  409,  410,
      423,  467,  418,  419,  468,  469,  470,  471,  472,  463,
      473,  474,  475,  476,  464,  465,  477,  478,  479,  480,
      481,  482,  466,  483,  484,  485,  487,  488,  467,  489,
      454,  468,  469,  470,  471,  472,  490,  473,  474,  475,
      476,  491,  492,  477,  478,  479,  480,  481,  482,  493,
      483,  484,  485,  487,  488,  494,  489,  413,  495,  496,
      497,  498,  499,  490,  500,  501,  502,  504,  491,  492,
      505,  506,  507,  509,  510,  508,  493,  511,  512,  513,

      514,  503,  494,  515,  516,  495,  496,  497,  498,  499,
      517,  500,  501,  502,  504,  518,  519,  505,  506,  507,
      509,  510,  508,  521,  511,  512,  513,  514,  503,  522,
      515,  516,  520,  523,  524,  525,  526,  517,  527,  404,
      529,  530,  518,  519,  531,  532,  533,  534,  535,  536,
      521,  537,  528,  486,  538,  539,  522,  540,  541,  520,
      523,  524,  525,  526,  542,  527,  543,  529,  530,  544,
      579,  531,  532,  533,  534,  535,  536,  580,  537,  528,
      581,  538,  539,  582,  540,  541,  552,  553,  583,  584,
      585,  542,  586,  543,  587,  588,  544,  579,  589,  590,

      591,  592,  593,  594,  580,  595,  596,  581,  597,  598,
      582,  599,  600,  601,  602,  583,  584,  585,  604,  586,
      605,  587,  588,  606,  610,  589,  590,  591,  592,  593,
      594,  608,  595,  596,  611,  597,  598,  612,  599,  600,
      601,  602,  613,  614,  615,  604,  609,  605,  616,  617,
      606,  610,  618,  620,  621,  622,  623,  624,  608,  625,
      626,  611,  627,  628,  612,  619,  629,  630,  631,  613,
      614,  615,  632,  609,  633,  616,  617,  634,  519,  618,
      620,  621,  622,  623,  624,  635,  625,  626,  636,  627,
      628,  637,  619,  629,  630,  631,  638,  639,  640,  632,

      984,  633,  641,  642,  634,  519,  643,  650,  678,  651,
      679,  680,  635,  681,  682,  636,  683,  684,  637,  453,
      453,  453,  685,  638,  639,  640,  686,  607,  687,  641,
      642,  688,  689,  643,  690,  678,  691,  679,  680,  692,
      681,  682,  693,  683,  684,  694,  695,  697,  698,  685,
      699,  700,  701,  686,  703,  687,  704,  705,  688,  689,
      706,  690,  707,  691,  708,  711,  692,  709,  712,  693,
      713,  714,  694,  695,  697,  698,  715,  699,  700,  701,
      710,  703,  716,  704,  705,  717,  718,  706,  719,  707,
      720,  708,  711,  721,  709,  712,  722,  713,  714,  723,

      724,  725,  726,  715,  728,  729,  730,  710,  765,  716,
      735,  736,  717,  718,  766,  719,  767,  720,  752,  753,
      721,  768,  769,  722,  770,  771,  723,  724,  725,  726,
      772,  728,  729,  730,  773,  765,  774,  775,  776,  777,
      779,  766,  780,  767,  781,  782,  783,  784,  768,  769,
      696,  770,  771,  785,  786,  787,  702,  772,  789,  790,
      791,  773,  792,  774,  775,  776,  777,  779,  788,  780,
      793,  781,  782,  783,  784,  827,  828,  829,  830,  983,
      785,  786,  787,  735,  736,  789,  790,  791,  982,  792,
      918,  919,  920,  921,  979,  788,  978,  793,  922,  923,

      924,  925,  827,  828,  829,  830,  727,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  831,
      798,  832,  833,  835,  837,  838,  839,  840,  841,  842,
      843,  873,  874,  875,  876,  877,  900,  901,  902,  927,
      928,  963,  964,  918,  919,  444,  831,  976,  832,  833,
      835,  837,  838,  839,  840,  841,  842,  843,  873,  874,
      875,  876,  877,  900,  901,  902,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  969,  945,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  920,  921,  922,  923,
      924,  925,  967,  968,  438,  969,  975,  836,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  436,  946,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  974,  947,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  973,  948,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  951,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  972,  950,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,

      971,  977,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  981,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  970,  980,  963,  964,  985,  986,
      987,  968,  987,  968,  987,  968,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  966,  991,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  985,  986,   66,   66,

       66,   68,  965,   68,   76,  962,   76,  452,  452,  961,
      960,  959,  958,  957,  956,  955,  954,  953,  952,  949,
      944,  943,  942,  941,  940,  939,  938,  937,  936,  935,
      934,  933,  932,  931,  930,  929,  926,  917,  916,  915,
      914,  913,  912,  911,  910,  909,  908,  907,  906,  905,
      904,  903,  899,  898,  897,  896,  895,  894,  893,  892,
      891,  890,  889,  888,  887,  886,  885,  884,  883,  882,
      881,  880,  879,  878,  835,  872,  871,  870,  869,  868,
      867,  866,  865,  864,  863,  862,  861,  860,  859,  858,
      857,  856,  855,  854,  853,  852,  851,  850,  849,  848,

      847,  846,  845,  844,  834,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  797,  796,  795,  794,  726,  701,  778,
      695,  764,  763,  762,  761,  760,  759,  758,  757,  756,
      755,  754,  751,  750,  749,  748,  747,  746,  745,  744,
      743,  742,  741,  740,  739,  738,  737,  734,  733,  732,
      731,  606,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  649,  648,

      647,  646,  645,  644,  603,  485,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  551,  550,  549,  548,  547,  546,  545,  412,  462,
      461,  460,  459,  458,  457,  456,  455,  451,  450,  449,
      448,  447,  310,  446,  445,  444,  443,  442,  433,  432,
      431,  430,  429,  426,  238,  380,  326,  324,  323,  322,
       61,   61,  310,  143,  320,  319,  318,  317,  314,  313,
      312,  311,  308,  308,  310,  307,  306,  304,  303,  302,
      299,  298,  295,  290,  289,  288,  287,  286,  283,  264,

      220,  209,  193,   67,  182,  181,   61,  177,  143,   61,
      140,   69,   67, 1003,    3, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003
    } ;

static const flex_int16_t yy_chk[2159] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,   17,
        7,    7,    7,   23,   50,   50,   31,   18,   34,   17,
       17,   17,   17,   17, 1001,   19,   17,   18,   18,   18,
       18,   18,    7,   56,   18,   19,   19,   19,   19,   19,
       23,   17,   19,   31,   36,   34,   53,   53,   24,   18,
     1000,   24,   56,   17,   27,   24,   37,   19,   28,    7,

       22,   18,   28,   65,  145,  145,   38,   27,   17,   19,
       22,   36,   22,   22,   22,   24,   18,   22,   24,   22,
       22,   27,   24,   37,   19,   28,   38,   22,   25,   28,
       65,   58,   25,   38,   27,   55,   25,   22,   55,   22,
       22,   22,   25,   26,   22,  999,   22,   22,   25,   57,
      998,   57,   54,   38,   57,   25,   26,   30,   54,   25,
       54,   30,   26,   25,   58,  997,   41,  173,   57,   25,
       26,   30,   41,    5,   77,   25,    6,   30,    5,    5,
        7,    6,    6,   26,   30,    7,    7,   32,   30,   26,
       79,   32,   33,   41,   35,  173,   33,   35,   30,   41,

       33,   77,   27,   32,   30,   60,   33,   35,   39,   60,
       60,  309,   39,  996,   32,   39,   42,   79,   32,   33,
       42,   35,   39,   33,   35,   81,   42,   33,   39,   43,
       32,  995,   43,   33,   35,   39,   70,   72,   40,   39,
       25,   40,   39,   42,   61,   61,   61,   42,   40,   39,
      994,   70,   81,   42,   40,   39,   43,  285,   72,   43,
       52,   73,   52,   70,   52,   40,  285,   52,   40,  151,
      151,   52,   52,   52,   52,   40,   52,   52,   70,   52,
       83,   40,   73,   84,   52,   72,   85,   52,   86,   52,
       87,   71,   52,   75,   75,   75,   75,   75,   52,   52,

       52,   71,   71,   71,   71,   71,  993,   83,   71,   73,
       84,   88,   90,   85,   89,   86,   74,   87,   89,   93,
       39,   96,   95,   71,   91,   74,   74,   74,   74,   74,
       74,  101,   91,   74,  283,   71,   92,   92,   88,   90,
       96,   89,  102,  309,  103,   89,   93,  283,   74,   95,
       71,   91,  152,  152,   98,   99,  104,  105,  101,   91,
       74,   98,  992,   92,   92,  107,  109,   96,   99,  102,
       98,  103,   99,  110,   61,   74,  112,  115,   99,   61,
       61,   98,  106,  104,  105,  111,  106,  113,   98,  106,
      106,  106,  107,  109,  111,   99,  113,   98,  114,   99,

      110,  111,  113,  112,  115,   99,  116,  117,  118,  106,
      121,  120,  111,  106,  113,  122,  106,  106,  106,  120,
      114,  111,  123,  113,  989,  126,  127,  129,  111,  113,
      988,  130,  123,  116,  117,  118,  133,  121,  120,  135,
      136,  137,  122,  123,  124,  132,  120,  114,  127,  124,
      123,  124,  126,  124,  129,  134,  139,  130,  132,  123,
      130,  124,  134,  133,  154,  154,  135,  136,  137,  141,
      123,  124,  142,  157,  161,  127,  124,  123,  124,  138,
      124,  183,  134,  139,  130,  132,  179,  130,  124,  134,
      184,  138,  138,  167,  167,  113,  141,  186,  179,  142,

      157,  161,  164,  164,  164,  164,  164,  185,  183,  188,
      191,  184,  164,  164,  164,  194,  195,  196,  138,  138,
      167,  198,  199,  200,  186,  164,  202,  203,  185,  204,
      205,  206,  194,  207,  208,  206,  188,  191,  184,  209,
      203,  210,  211,  212,  196,  195,  984,  215,  198,  199,
      200,  213,  214,  202,  217,  185,  204,  205,  206,  194,
      207,  208,  206,  218,  219,  214,  209,  203,  210,  211,
      212,  220,  195,  157,  215,  221,  222,  213,  223,  214,
      228,  217,  224,  225,  226,  227,  230,  227,  229,  231,
      218,  219,  214,  232,  233,  233,  237,  238,  220,  230,

      239,  983,  221,  222,  213,  240,  244,  223,  223,  224,
      225,  226,  227,  228,  227,  229,  231,  235,  452,  244,
      232,  233,  233,  237,  238,  243,  230,  239,  235,  235,
      245,  247,  240,  248,  223,  223,  249,  250,  251,  255,
      228,  243,  253,  254,  235,  235,  244,  256,  257,  258,
      259,  982,  243,  245,  260,  235,  235,  254,  247,  261,
      248,  253,  264,  249,  250,  251,  255,  265,  243,  253,
      254,  235,  235,  267,  256,  257,  258,  263,  259,  268,
      245,  260,  270,  273,  254,  275,  261,  278,  253,  264,
      279,  263,  263,  280,  265,  274,  274,  291,  292,  293,

      267,  291,  321,  293,  263,  259,  268,  325,  326,  270,
      273,  292,  275,  294,  278,  328,  294,  279,  263,  263,
      280,  330,  274,  274,  331,  332,  333,  334,  337,  321,
      338,  339,  340,  341,  325,  326,  342,  344,  345,  346,
      347,  349,  328,  350,  351,  352,  353,  354,  330,  355,
      452,  331,  332,  333,  334,  337,  356,  338,  339,  340,
      341,  357,  359,  342,  344,  345,  346,  347,  349,  360,
      350,  351,  352,  353,  354,  361,  355,  265,  362,  363,
      364,  368,  371,  356,  372,  373,  374,  376,  357,  359,
      377,  379,  381,  382,  383,  381,  360,  384,  385,  386,

      388,  374,  361,  390,  392,  362,  363,  364,  368,  371,
      393,  372,  373,  374,  376,  395,  396,  377,  379,  381,
      382,  383,  381,  397,  384,  385,  386,  388,  374,  398,
      390,  392,  396,  399,  400,  401,  402,  393,  403,  405,
      406,  407,  395,  396,  408,  409,  410,  411,  412,  414,
      397,  415,  405,  352,  416,  417,  398,  418,  419,  396,
      399,  400,  401,  402,  420,  403,  421,  406,  407,  423,
      464,  408,  409,  410,  411,  412,  414,  467,  415,  405,
      469,  416,  417,  470,  418,  419,  431,  431,  471,  472,
      473,  420,  474,  421,  475,  476,  423,  464,  477,  478,

      479,  480,  481,  482,  467,  483,  487,  469,  488,  489,
      470,  490,  491,  492,  493,  471,  472,  473,  496,  474,
      497,  475,  476,  502,  507,  477,  478,  479,  480,  481,
      482,  506,  483,  487,  508,  488,  489,  509,  490,  491,
      492,  493,  510,  511,  512,  496,  506,  497,  513,  514,
      502,  507,  515,  516,  517,  518,  519,  520,  506,  522,
      523,  508,  524,  525,  509,  515,  526,  528,  530,  510,
      511,  512,  531,  506,  532,  513,  514,  533,  534,  515,
      516,  517,  518,  519,  520,  536,  522,  523,  537,  524,
      525,  538,  515,  526,  528,  530,  539,  540,  541,  531,

      975,  532,  542,  543,  533,  534,  544,  551,  579,  551,
      581,  584,  536,  585,  586,  537,  587,  588,  538,  570,
      570,  570,  589,  539,  540,  541,  590,  502,  592,  542,
      543,  593,  594,  544,  595,  579,  596,  581,  584,  597,
      585,  586,  598,  587,  588,  599,  600,  601,  602,  589,
      603,  605,  608,  590,  610,  592,  611,  612,  593,  594,
      614,  595,  615,  596,  616,  618,  597,  617,  619,  598,
      622,  626,  599,  600,  601,  602,  627,  603,  605,  608,
      617,  610,  628,  611,  612,  630,  631,  614,  632,  615,
      633,  616,  618,  635,  617,  619,  636,  622,  626,  637,

      638,  639,  640,  627,  641,  642,  643,  617,  680,  628,
      648,  648,  630,  631,  681,  632,  682,  633,  665,  665,
      635,  683,  685,  636,  686,  687,  637,  638,  639,  640,
      688,  641,  642,  643,  689,  680,  690,  691,  693,  694,
      703,  681,  704,  682,  705,  706,  709,  710,  683,  685,
      600,  686,  687,  714,  715,  717,  608,  688,  718,  722,
      723,  689,  725,  690,  691,  693,  694,  703,  717,  704,
      729,  705,  706,  709,  710,  766,  769,  770,  771,  974,
      714,  715,  717,  798,  798,  718,  722,  723,  970,  725,
      894,  894,  895,  895,  966,  717,  965,  729,  896,  896,

      897,  897,  766,  769,  770,  771,  640,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  772,
      736,  774,  777,  779,  781,  782,  786,  787,  788,  790,
      793,  828,  830,  833,  834,  843,  873,  875,  876,  899,
      899,  944,  944,  945,  945,  962,  772,  961,  774,  777,
      779,  781,  782,  786,  787,  788,  790,  793,  828,  830,
      833,  834,  843,  873,  875,  876,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  952,  919,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  946,  946,  947,  947,
      948,  948,  951,  951,  960,  952,  959,  779,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  958,  921,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  957,  923,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  956,  925,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  955,  928,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,

      954,  964,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  953,  968,  977,  977,  978,  978,
      979,  979,  980,  980,  981,  981,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  950,  986,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  991,  991, 1004, 1004,

     1004, 1005,  949, 1005, 1006,  942, 1006, 1007, 1007,  941,
      940,  939,  938,  937,  936,  934,  933,  932,  929,  926,
      917,  916,  915,  914,  913,  912,  911,  910,  909,  908,
      907,  906,  905,  904,  903,  902,  898,  893,  892,  891,
      890,  889,  887,  886,  885,  884,  883,  882,  881,  880,
      879,  878,  865,  864,  863,  862,  861,  860,  859,  858,
      857,  856,  855,  854,  853,  852,  851,  850,  849,  848,
      847,  846,  845,  844,  836,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  805,  804,  803,  799,

      797,  796,  795,  794,  778,  764,  763,  762,  761,  760,
      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  747,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  734,  733,  732,  731,  727,  702,  699,
      696,  677,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  651,  650,  649,  647,  646,  645,
      644,  607,  578,  577,  576,  575,  574,  573,  572,  571,
      569,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  550,  549,

      548,  547,  546,  545,  495,  486,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  451,  450,  449,  448,  447,
      446,  445,  443,  442,  441,  440,  439,  437,  435,  433,
      432,  430,  429,  428,  427,  426,  425,  424,  413,  320,
      319,  318,  317,  316,  315,  313,  312,  307,  306,  304,
      303,  302,  301,  299,  298,  297,  296,  295,  290,  289,
      288,  287,  286,  284,  241,  236,  193,  190,  189,  187,
      182,  181,  180,  178,  177,  176,  175,  174,  172,  171,
      170,  169,  168,  166,  165,  163,  162,  160,  159,  158,
      156,  155,  153,  150,  149,  148,  147,  146,  144,  128,

      100,   94,   80,   66,   64,   63,   62,   59,   51,   49,
       47,   13,    8,    3, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[186] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "openinghourslexer.l"
#line 2 "openinghourslexer.l"
/*
    SPDX-FileCopyrightText: 2020 Volker Krause <vkrause@kde.org>
    SPDX-License-Identifier: LGPL-2.0-or-later
*/

#include "openinghoursparser_p.h"

#include <cstring>

#define YY_USER_ACTION yylloc->first_column = yylloc->last_column; yylloc->last_column += yyleng;

#line 1307 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"
/* technically the case of all tokens is clearly defined, but reality ignores that in parts, so we do the same */
#line 1309 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"

#define INITIAL 0

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 30 "openinghourslexer.l"


#line 1586 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1004 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1003 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 32 "openinghourslexer.l"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "openinghourslexer.l"
{
    yylval->num = std::strtol(yytext, nullptr, 10);
    if (yyleng == 4) {
        if ((yylval->num > 2000 && yylval->num < 2100) || (yylval->num >= 1000 && (yylval->num % 100) >= 60)) {
            return T_YEAR;
        }
        if (yylval->num <= 2400 && (yylval->num % 100) < 60) {
            return T_4DIGIT_TIME;
        }
    }
    return T_INTEGER;
}
	YY_BREAK
case 3:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 47 "openinghourslexer.l"
{ return T_NORMAL_RULE_SEPARATOR; } // technically this should have space after the semicolon, but that is not always followed in OSM data
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "openinghourslexer.l"
{ return T_ADDITIONAL_RULE_SEPARATOR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "openinghourslexer.l"
{ return T_FALLBACK_SEPARATOR; } // technically this should have a space on either side, but that is not always followed in OSM data
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "openinghourslexer.l"
{ yylval->state = State::Open;    return T_STATE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "openinghourslexer.l"
{ yylval->state = State::Closed;  return T_STATE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "openinghourslexer.l"
{ yylval->state = State::Off;  return T_STATE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "openinghourslexer.l"
{ yylval->state = State::Unknown; return T_STATE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "openinghourslexer.l"
{ return T_24_7; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "openinghourslexer.l"
{ return T_PLUS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "openinghourslexer.l"
{ return T_MINUS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "openinghourslexer.l"
{ return T_SLASH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "openinghourslexer.l"
{ return T_COLON; }
	YY_BREAK
case 15:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 62 "openinghourslexer.l"
{ return T_COMMA; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "openinghourslexer.l"
{} // eat trailing commas/semicolons, while invalid those occur commonly in OSM data. Practically this is done indirectly in combination with the above rules as we cannot lookahead to EOF
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "openinghourslexer.l"
{ yylval->time = { Time::Dawn,    0, 0 }; return T_EVENT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "openinghourslexer.l"
{ yylval->time = { Time::Sunrise, 0, 0 }; return T_EVENT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "openinghourslexer.l"
{ yylval->time = { Time::Sunset , 0, 0 }; return T_EVENT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "openinghourslexer.l"
{ yylval->time = { Time::Dusk,    0, 0 }; return T_EVENT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "openinghourslexer.l"
{ return T_LBRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "openinghourslexer.l"
{ return T_RBRACKET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "openinghourslexer.l"
{ return T_LPAREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "openinghourslexer.l"
{ return T_RPAREN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "openinghourslexer.l"
{ return T_PH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "openinghourslexer.l"
{ return T_SH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "openinghourslexer.l"
{ return T_KEYWORD_DAY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "openinghourslexer.l"
{ return T_KEYWORD_DAY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "openinghourslexer.l"
{ return T_KEYWORD_WEEK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "openinghourslexer.l"
{ return T_EASTER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "openinghourslexer.l"
{ return T_WHITSUN; } // non-standard, will be turned into "easter +49 days"
	YY_BREAK
/* am/pm time format support, non-standard and has to appear before the generic number token. */
case 32:
YY_RULE_SETUP
#line 86 "openinghourslexer.l"
{ yylval->num = std::strtol(yytext, nullptr, 10); return T_ALT_TIME_AM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "openinghourslexer.l"
{ yylval->num = std::strtol(yytext, nullptr, 10); return T_ALT_TIME_PM; }
	YY_BREAK
/* technically weekday names should be two letter English abbreviations, but reality is more creative */
case 34:
YY_RULE_SETUP
#line 90 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 91 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 92 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 93 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 94 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 95 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 96 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* same for month names, technically those should be three letter English abbreviations */
case 57:
YY_RULE_SETUP
#line 118 "openinghourslexer.l"
{ yylval->num = 1; return T_MONTH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "openinghourslexer.l"
{ yylval->num = 2; return T_MONTH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "openinghourslexer.l"
{ yylval->num = 3; return T_MONTH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "openinghourslexer.l"
{ yylval->num = 4; return T_MONTH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "openinghourslexer.l"
{ yylval->num = 6; return T_MONTH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "openinghourslexer.l"
{ yylval->num = 7; return T_MONTH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "openinghourslexer.l"
{ yylval->num = 8; return T_MONTH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "openinghourslexer.l"
{ yylval->num = 9; return T_MONTH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "openinghourslexer.l"
{ yylval->num = 10; return T_MONTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "openinghourslexer.l"
{ yylval->num = 11; return T_MONTH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "openinghourslexer.l"
{ yylval->num = 12; return T_MONTH; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 130 "openinghourslexer.l"
{ yylval->num = 1; return T_MONTH; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 131 "openinghourslexer.l"
{ yylval->num = 2; return T_MONTH; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 132 "openinghourslexer.l"
{ yylval->num = 3; return T_MONTH; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 133 "openinghourslexer.l"
{ yylval->num = 4; return T_MONTH; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 134 "openinghourslexer.l"
{ yylval->num = 5; return T_MONTH; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 135 "openinghourslexer.l"
{ yylval->num = 6; return T_MONTH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 136 "openinghourslexer.l"
{ yylval->num = 7; return T_MONTH; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 137 "openinghourslexer.l"
{ yylval->num = 8; return T_MONTH; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 138 "openinghourslexer.l"
{ yylval->num = 9; return T_MONTH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 139 "openinghourslexer.l"
{ yylval->num = 10; return T_MONTH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 140 "openinghourslexer.l"
{ yylval->num = 11; return T_MONTH; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 141 "openinghourslexer.l"
{ yylval->num = 12; return T_MONTH; }
	YY_BREAK
/* Month names in French */
case 80:
YY_RULE_SETUP
#line 144 "openinghourslexer.l"
{ yylval->num = 1; return T_MONTH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 145 "openinghourslexer.l"
{ yylval->num = 2; return T_MONTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 146 "openinghourslexer.l"
{ yylval->num = 3; return T_MONTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 147 "openinghourslexer.l"
{ yylval->num = 4; return T_MONTH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 148 "openinghourslexer.l"
{ yylval->num = 5; return T_MONTH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 149 "openinghourslexer.l"
{ yylval->num = 6; return T_MONTH; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 150 "openinghourslexer.l"
{ yylval->num = 7; return T_MONTH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 151 "openinghourslexer.l"
{ yylval->num = 8; return T_MONTH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 152 "openinghourslexer.l"
{ yylval->num = 9; return T_MONTH; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 153 "openinghourslexer.l"
{ yylval->num = 10; return T_MONTH; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 154 "openinghourslexer.l"
{ yylval->num = 11; return T_MONTH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 155 "openinghourslexer.l"
{ yylval->num = 12; return T_MONTH; }
	YY_BREAK
/* Month names in Russian */
case 92:
YY_RULE_SETUP
#line 158 "openinghourslexer.l"
{ yylval->num = 1; return T_MONTH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 159 "openinghourslexer.l"
{ yylval->num = 2; return T_MONTH; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 160 "openinghourslexer.l"
{ yylval->num = 3; return T_MONTH; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 161 "openinghourslexer.l"
{ yylval->num = 4; return T_MONTH; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 162 "openinghourslexer.l"
{ yylval->num = 5; return T_MONTH; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 163 "openinghourslexer.l"
{ yylval->num = 6; return T_MONTH; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 164 "openinghourslexer.l"
{ yylval->num = 7; return T_MONTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 165 "openinghourslexer.l"
{ yylval->num = 8; return T_MONTH; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 166 "openinghourslexer.l"
{ yylval->num = 9; return T_MONTH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 167 "openinghourslexer.l"
{ yylval->num = 10; return T_MONTH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 168 "openinghourslexer.l"
{ yylval->num = 11; return T_MONTH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 169 "openinghourslexer.l"
{ yylval->num = 12; return T_MONTH; }
	YY_BREAK
/* different quote types are sometimes mixed and/or used nested, so this is a compromise to catch most of them */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 173 "openinghourslexer.l"
{
    yylval->strRef.str = yytext + 1;
    yylval->strRef.len = yyleng - 2;
    return T_COMMENT;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 178 "openinghourslexer.l"
{
    int startOffset = 1; int endOffset = 1;
    for (const auto quote : { "\"", "“", "”", "„" }) {
        const int len = std::strlen(quote);
        if (yyleng <= len) {
            continue;
        }
        if (std::strncmp(yytext, quote, len) == 0) {
            startOffset = len;
        }
        if (std::strncmp(yytext + yyleng - len, quote, len) == 0) {
            endOffset = len;
        }
    }
    yylval->strRef.str = yytext + startOffset;
    yylval->strRef.len = yyleng - startOffset - endOffset;
    return T_COMMENT;
}
	YY_BREAK
/* various alternative formats, none of this is remotely compliant with the specification, but appears in reality nevertheless */
/* alternative time formats */
case 106:
YY_RULE_SETUP
#line 200 "openinghourslexer.l"
{ return T_ALT_TIME_SEP; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 201 "openinghourslexer.l"
{ return T_ALT_TIME_SEP_OR_SUFFIX; }
	YY_BREAK
/* alternative range separators */
case 108:
YY_RULE_SETUP
#line 204 "openinghourslexer.l"
{ return T_ALT_RANGE_SEP; }
	YY_BREAK
/* localized state names */
case 109:
YY_RULE_SETUP
#line 207 "openinghourslexer.l"
{ yylval->state = State::Closed; return T_STATE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "openinghourslexer.l"
{ yylval->state = State::Open;    return T_STATE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "openinghourslexer.l"
{ yylval->state = State::Unknown; return T_STATE; }
	YY_BREAK
/* German localized day names. */
case 112:
YY_RULE_SETUP
#line 212 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 213 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 214 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 215 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 216 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 217 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 218 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 219 "openinghourslexer.l"
{ return T_PH; }
	YY_BREAK
/* French, Spanish, Italian */
case 120:
YY_RULE_SETUP
#line 222 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 223 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
/* French, Italian */
case 122:
YY_RULE_SETUP
#line 225 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
/* German, Spanish, Italian */
case 123:
YY_RULE_SETUP
#line 227 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
/* French */
case 124:
YY_RULE_SETUP
#line 229 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
/* Italian */
case 125:
YY_RULE_SETUP
#line 231 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
/* French, Italian */
case 126:
YY_RULE_SETUP
#line 233 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
/* German */
case 127:
YY_RULE_SETUP
#line 235 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* "Di" conflicts between German and French...
    "Do" conflicts between German and Spanish+Italian... */
/* French localized day names. */
case 128:
YY_RULE_SETUP
#line 241 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 242 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 243 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 244 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 245 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 246 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 247 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 248 "openinghourslexer.l"
{ return T_PH; }
	YY_BREAK
/* Spanish localized day names */
case 136:
YY_RULE_SETUP
#line 251 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 252 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 253 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 254 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 255 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 256 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 257 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* Italian localized day names */
case 143:
YY_RULE_SETUP
#line 260 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 261 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 262 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 263 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 264 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 265 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 266 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* Portuguese localized day names */
case 150:
YY_RULE_SETUP
#line 269 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 270 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 271 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 272 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 273 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 274 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
/* Japanese localized day names */
case 156:
YY_RULE_SETUP
#line 277 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 278 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 279 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 280 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 281 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 282 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 283 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 284 "openinghourslexer.l"
{ return T_PH; }
	YY_BREAK
/* Indonesian localized day names */
case 164:
YY_RULE_SETUP
#line 287 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 288 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 289 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 290 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 291 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 292 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 293 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* Russian localized day names */
case 171:
YY_RULE_SETUP
#line 296 "openinghourslexer.l"
{ yylval->num = 1; return T_WEEKDAY; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 297 "openinghourslexer.l"
{ yylval->num = 2; return T_WEEKDAY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 298 "openinghourslexer.l"
{ yylval->num = 3; return T_WEEKDAY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 299 "openinghourslexer.l"
{ yylval->num = 4; return T_WEEKDAY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 300 "openinghourslexer.l"
{ yylval->num = 5; return T_WEEKDAY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 301 "openinghourslexer.l"
{ yylval->num = 6; return T_WEEKDAY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 302 "openinghourslexer.l"
{ yylval->num = 7; return T_WEEKDAY; }
	YY_BREAK
/* creative rule separators */
case 178:
YY_RULE_SETUP
#line 305 "openinghourslexer.l"
{ return T_ADDITIONAL_RULE_SEPARATOR; }
	YY_BREAK
/* skip filler words */
/* Note: the 'с' is not an ASCII 'c'! */
case 179:
YY_RULE_SETUP
#line 309 "openinghourslexer.l"
{}
	YY_BREAK
/* localized time event names */
case 180:
YY_RULE_SETUP
#line 312 "openinghourslexer.l"
{ yylval->time = { Time::Dawn,    0, 0 }; return T_EVENT; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 313 "openinghourslexer.l"
{ yylval->time = { Time::Dusk,    0, 0 }; return T_EVENT; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 314 "openinghourslexer.l"
{ yylval->time = { Time::Sunrise, 0, 0 }; return T_EVENT; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 315 "openinghourslexer.l"
{ yylval->time = { Time::Sunset , 0, 0 }; return T_EVENT; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 317 "openinghourslexer.l"
{
    //printf("unexpected character: %s at %d:%d\n", yytext, yylloc->first_line, yylloc->first_column);
    return T_INVALID;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 322 "openinghourslexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2651 "/home/znurre/Program/Develop/C++/Qopeninghours/build/src/lib/openinghourslexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1004 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1004 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1003);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 322 "openinghourslexer.l"


